"""
Functions for formatting a response from a database query

Response formatters accept one required parameters and two optional parameters:
    result_set: list[dict] The result set from the query, generated by calling cursor.fetchall()
    pg_config: Optional[PostgresConfig] The configuration for the database connection
    command: Optional[SQLCommand] The command that generated the result set
"""
from collections import namedtuple
from query_builder.utilities import (
    decompose_row,
    dataclass_for_table
)

def default_response_formatter(result_set: list[dict], pg_config=None, command=None) -> list[dict]:
    """
    Returns the result set as a list of dictionaries
    """
    return [dict(r) for r in result_set]


def decompose_dict_response_formatter(result_set: list[dict], pg_config=None, command=None) -> tuple[list[dict], list[str]]:
    """
    Returns the result set as a tuple of a list of dictionaries and a list of the columns
    """
    return [decompose_row(r) for r in result_set]


def object_response_formatter(result_set: list[dict], pg_config=None, command=None) -> list[object]:
    table_classes = {
        command._table_name: dataclass_for_table(command._table_name, pg_config)
    }
    decomposed = [decompose_row(r) for r in result_set]

    if not hasattr(command, '_join') or command._join is None:
        # If there is no join, return a list of objects for the primary table for each row
        return [
            table_classes[command._table_name](**row[command._table_name])
            for row in decomposed
        ]

    # If there is a join, create dataclasses for each table in the join
    for t in command._join.tables:
        table_classes[t] = dataclass_for_table(t, pg_config)

    Row = namedtuple("Row", table_classes.keys())

    # Looks complex, but it's just a list comprehension that creates a namedtuple for each row
    return [
        Row(
            **{tab: table_classes[tab](**values) for tab, values in row.items()}
        )
        for row in decomposed
    ]
